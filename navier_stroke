import numpy as np

# === 맥스웰 방정식 계산 ===
def calculate_electromagnetic_force(rho_e, J, E, B):
    """
    전자기력 계산
    rho_e: 전하 밀도 (Charge Density)
    J: 전류 밀도 (Current Density, Vector Field)
    E: 전기장 (Electric Field, Vector Field)
    B: 자기장 (Magnetic Field, Vector Field)
    """
    F_em = rho_e[:, :, None] * E + np.cross(J, B, axis=2)  # \rho_e * E + J x B
    return F_em

# === 나비에-스토크스 계산 ===
def navier_stokes_with_em(u, v, p, rho, mu, dx, dy, dt, nt, F_em):
    for _ in range(nt):
        un = u.copy()
        vn = v.copy()
        pn = p.copy()

        # 운동량 방정식 (x 방향)
        u[1:-1, 1:-1] = (
            un[1:-1, 1:-1]
            + dt * (
                -un[1:-1, 1:-1] * partial_derivative(un, dx, axis=1)[1:-1, 1:-1]
                - vn[1:-1, 1:-1] * partial_derivative(un, dy, axis=0)[1:-1, 1:-1]
                - (1 / rho) * partial_derivative(pn, dx, axis=1)[1:-1, 1:-1]
                + mu * laplacian(un, dx, dy)[1:-1, 1:-1]
                + F_em[1:-1, 1:-1, 0] / rho  # 전자기력 x-성분 추가
            )
        )

        # 운동량 방정식 (y 방향)
        v[1:-1, 1:-1] = (
            vn[1:-1, 1:-1]
            + dt * (
                -un[1:-1, 1:-1] * partial_derivative(vn, dx, axis=1)[1:-1, 1:-1]
                - vn[1:-1, 1:-1] * partial_derivative(vn, dy, axis=0)[1:-1, 1:-1]
                - (1 / rho) * partial_derivative(pn, dy, axis=0)[1:-1, 1:-1]
                + mu * laplacian(vn, dx, dy)[1:-1, 1:-1]
                + F_em[1:-1, 1:-1, 1] / rho  # 전자기력 y-성분 추가
            )
        )

        # 압력 방정식
        p[1:-1, 1:-1] = pn[1:-1, 1:-1] - dt * rho * (
            partial_derivative(un, dx, axis=1)[1:-1, 1:-1]
            + partial_derivative(vn, dy, axis=0)[1:-1, 1:-1]
        )

        # 경계 조건 적용
        u, v, p = apply_boundary_conditions(u, v, p)

    return u, v, p

# === 시뮬레이션 설정 ===
# 격자와 초기 값
nx, ny = 50, 50
dx, dy = 1.0 / (nx - 1), 1.0 / (ny - 1)
x = np.linspace(0, 1, nx)
y = np.linspace(0, 1, ny)
X, Y = np.meshgrid(x, y)

# 초기값 설정
u = np.zeros((ny, nx))
v = np.zeros((ny, nx))
p = np.zeros((ny, nx))
rho = 1.0
mu = 0.1
dt = 0.01
nt = 100

# 전기장(E) 및 자기장(B) 설정
E = np.zeros((ny, nx, 2))  # 2D 전기장
B = np.zeros((ny, nx, 2))  # 2D 자기장
rho_e = np.ones((ny, nx))  # 전하 밀도
J = np.zeros((ny, nx, 2))  # 전류 밀도

# 전기장 및 자기장 초기화 (임의 값 예제)
E[:, :, 0] = 1.0  # x-방향 전기장
B[:, :, 1] = 1.0  # y-방향 자기장

# 전자기력 계산
F_em = calculate_electromagnetic_force(rho_e, J, E, B)

# 나비에-스토크스 방정식 계산
u, v, p = navier_stokes_with_em(u, v, p, rho, mu, dx, dy, dt, nt, F_em)

# 결과 시각화
import matplotlib.pyplot as plt

plt.figure(figsize=(11, 7))
plt.contourf(X, Y, p, alpha=0.5, cmap="viridis")
plt.colorbar(label="Pressure")
plt.quiver(X, Y, u, v, color="red")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Velocity Field and Pressure Contours with Electromagnetic Forces")
plt.show()
