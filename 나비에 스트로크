import kotlin.math.*

class MatrixFluidDynamics {
    data class Matrix3x3(val data: Array<DoubleArray>) {
        operator fun times(vector: DoubleArray): DoubleArray {
            return DoubleArray(3) { i ->
                data[i][0] * vector[0] + data[i][1] * vector[1] + data[i][2] * vector[2]
            }
        }
    }

    // 물리 상수
    private val rho = 1.0     // 밀도
    private val mu = 0.01     // 점성
    private val sigma = 1.0   // 전기 전도도
    private val epsilon = 1.0  // 유전율

    // 나비에-스트로크스 연산자 행렬
    private fun createNavierStokesOperator(): Matrix3x3 {
        return Matrix3x3(arrayOf(
            doubleArrayOf(-mu/rho, 0.0, 0.0),
            doubleArrayOf(0.0, -mu/rho, 0.0),
            doubleArrayOf(0.0, 0.0, -mu/rho)
        ))
    }

    // 로렌츠 힘 연산자 행렬 (B-field cross product)
    private fun createLorentzOperator(B: DoubleArray): Matrix3x3 {
        return Matrix3x3(arrayOf(
            doubleArrayOf(0.0, -B[2], B[1]),
            doubleArrayOf(B[2], 0.0, -B[0]),
            doubleArrayOf(-B[1], B[0], 0.0)
        ))
    }

    fun solve(
        velocity: DoubleArray,
        eField: DoubleArray,
        bField: DoubleArray,
        pressureGradient: DoubleArray,
        dt: Double
    ): DoubleArray {
        // 선형 연산자들
        val navierStokes = createNavierStokesOperator()
        val lorentz = createLorentzOperator(bField)

        // dv/dt = -∇p/ρ + μ∇²v/ρ + σ(E + v×B)/ρ
        val viscousTerm = navierStokes.times(velocity)
        val lorentzTerm = lorentz.times(velocity).map { it * sigma/rho }.toDoubleArray()
        val electricTerm = eField.map { it * sigma/rho }.toDoubleArray()
        
        // 최종 속도 업데이트
        return DoubleArray(3) { i ->
            velocity[i] + dt * (
                -pressureGradient[i]/rho + 
                viscousTerm[i] + 
                lorentzTerm[i] + 
                electricTerm[i]
            )
        }
    }

    // 발산 계산
    fun calculateDivergence(velocity: Array<DoubleArray>, dx: Double): DoubleArray {
        val div = DoubleArray(velocity[0].size)
        for (i in 1 until velocity[0].size - 1) {
            div[i] = (velocity[0][i+1] - velocity[0][i-1])/(2*dx) +
                     (velocity[1][i+1] - velocity[1][i-1])/(2*dx) +
                     (velocity[2][i+1] - velocity[2][i-1])/(2*dx)
        }
        return div
    }
}
