import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# 파라미터 정의
rho = 1.0   # 밀도
mu = 0.01   # 점성 계수
e = 1.0     # 전하 밀도

# 격자 생성 (2D 영역)
x = np.linspace(0, 10, 20)  # x 좌표
y = np.linspace(0, 10, 20)  # y 좌표
X, Y = np.meshgrid(x, y)    # 2D 격자 생성

# 속도 필드 (u = 속도 벡터)
U = np.sin(X) * np.cos(Y)  # x 방향 속도
V = -np.cos(X) * np.sin(Y)  # y 방향 속도

# 압력 필드 (p)
P = X**2 - Y**2  # 단순 스칼라 압력 필드

# 전기장, 자기장, 전류 밀도 정의
E = np.array([1.0, 0.0])  # 전기장 (2D, 일정한 방향)
B = np.array([0.0, 1.0])  # 자기장 (2D, 일정한 방향)
J = np.array([0.0, 0.0])  # 전류 밀도 (여기서는 0으로 설정)

# 연산 함수 정의
def gradient(field, axis):
    """간단한 1차 편미분 (중앙 차분 사용)"""
    if axis == 'x':
        return np.gradient(field, axis=1)  # x 방향 기울기
    elif axis == 'y':
        return np.gradient(field, axis=0)  # y 방향 기울기

def laplacian(field):
    """라플라시안 계산 (2차 미분)"""
    return np.gradient(np.gradient(field, axis=0), axis=0) + np.gradient(np.gradient(field, axis=1), axis=1)

def cross_product(J, B):
    """벡터곱 계산 (2D 평면 기준)"""
    return np.cross(J, B)

# 각 항 계산
pressure_gradient_x = -gradient(P, 'x')  # 압력 기울기 (x 방향)
pressure_gradient_y = -gradient(P, 'y')  # 압력 기울기 (y 방향)

viscous_term_x = mu * laplacian(U)  # 점성 항 (x 방향)
viscous_term_y = mu * laplacian(V)  # 점성 항 (y 방향)

electric_field_x = rho * e * E[0]  # 전기장 항 (x 방향)
electric_field_y = rho * e * E[1]  # 전기장 항 (y 방향)

# 최종 속도 변화 벡터
resultant_x = pressure_gradient_x + viscous_term_x + electric_field_x
resultant_y = pressure_gradient_y + viscous_term_y + electric_field_y

# 시각화
fig, ax = plt.subplots(2, 2, figsize=(12, 12))

# 1. 속도 벡터 필드 시각화
ax[0, 0].quiver(X, Y, U, V, color='b')
ax[0, 0].set_title('Velocity Field (U, V)')
ax[0, 0].set_xlabel('X')
ax[0, 0].set_ylabel('Y')

# 2. 압력 필드 (스칼라) 시각화
c1 = ax[0, 1].contourf(X, Y, P, cmap='coolwarm', levels=20)
fig.colorbar(c1, ax=ax[0, 1])
ax[0, 1].set_title('Pressure Field (P)')
ax[0, 1].set_xlabel('X')
ax[0, 1].set_ylabel('Y')

# 3. 압력 기울기 벡터 시각화
ax[1, 0].quiver(X, Y, pressure_gradient_x, pressure_gradient_y, color='r')
ax[1, 0].set_title('Pressure Gradient (-∇P)')
ax[1, 0].set_xlabel('X')
ax[1, 0].set_ylabel('Y')

# 4. 최종 결과 벡터 시각화
ax[1, 1].quiver(X, Y, resultant_x, resultant_y, color='g')
ax[1, 1].set_title('Resultant Field')
ax[1, 1].set_xlabel('X')
ax[1, 1].set_ylabel('Y')

plt.tight_layout()
plt.show()
